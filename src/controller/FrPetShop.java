package controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.print.attribute.standard.JobMessageFromOperator;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import petshop.models.Cat;
import petshop.models.Dog;
import petshop.models.Hamster;
import petshop.models.Pet;

/**
 *
 * @author NTA
 */
public class FrPetShop extends javax.swing.JFrame {

    List<Pet> petList = new ArrayList<>();
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FrPetShop.class.getName());

    /**
     * Creates new form FrPetShop
     */
    public FrPetShop() {
        model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"Mã Thú Cưng", "Tên Thú Cưng", "Loại", "Tuổi", "Giá", "Màu Lông", "Mô Tả", "Số Lượng", "Vacxin"}
        );
        initComponents();
        setTitle("Quản Lí Thú Cưng");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String[] petTypes = {"Cat", "Dog", "Hamster"};

        for (String type : petTypes) {
            choose.addItem(type);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        choose = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        color = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        descrip = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        count = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        vacxin = new javax.swing.JTextField();
        exit = new javax.swing.JButton();
        add = new javax.swing.JButton();
        find = new javax.swing.JButton();
        display = new javax.swing.JButton();
        readfile = new javax.swing.JButton();
        savefile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Quản Lí Thú Cưng");

        jLabel2.setText("Mã Thú Cưng :");

        jLabel3.setText("Tên Thú Cưng :");

        jLabel4.setText("Loài :");

        jLabel5.setText("Tuổi :");

        jLabel6.setText("Giá :");

        jLabel7.setText("Màu Lông :");

        jLabel8.setText("Mô Tả :");

        jLabel9.setText("Số Lượng :");

        jLabel10.setText("Vacxin :");

        exit.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        exit.setText("Thoát");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        add.setText("Thêm");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        find.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        find.setText("Tìm Kiếm");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        display.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        display.setText("Hiện Thị");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        readfile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        readfile.setText("Đọc File");
        readfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readfileActionPerformed(evt);
            }
        });

        savefile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        savefile.setText("Lưu File");
        savefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savefileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vacxin, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                            .addComponent(count)
                            .addComponent(descrip)
                            .addComponent(color)
                            .addComponent(price)
                            .addComponent(age)
                            .addComponent(name)
                            .addComponent(choose, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(readfile, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(savefile, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exit)
                            .addComponent(find))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                        .addComponent(display)
                        .addGap(131, 131, 131))))
            .addGroup(layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(readfile))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(descrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(savefile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(vacxin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(find)
                    .addComponent(display))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(exit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed

        // sort
        Collections.sort(petList, new Comparator<Pet>() {
            @Override
            public int compare(Pet p1, Pet p2) {
                String name1 = getPetName(p1);
                String name2 = getPetName(p2);
                return name1.compareToIgnoreCase(name2);
            }

            private String getPetName(Pet p) {
                if (p instanceof Dog) {
                    return ((Dog) p).getName();
                }
                if (p instanceof Cat) {
                    return ((Cat) p).getName();
                }
                if (p instanceof Hamster) {
                    return "Không có tên";
                }
                return "";
            }
        });
        //
        model.setRowCount(0);
        for (Pet p : petList) {
            if (p instanceof Dog) {
                Dog d = (Dog) p;
                model.addRow(new Object[]{
                    d.getId(),
                    d.getName(),
                    "Dog",
                    d.getAge(),
                    d.getPrice(),
                    d.getColor(),
                    d.getDescrip(),
                    d.isInStock(),
                    d.isVacxinated() ? "Đã Tiêm" : "Chưa Tiêm"
                });
            }
            if (p instanceof Cat) {
                Cat d = (Cat) p;
                model.addRow(new Object[]{
                    d.getId(),
                    d.getName(),
                    "Cat",
                    d.getAge(),
                    d.getPrice(),
                    d.getColor(),
                    d.getDescrip(),
                    d.isInStock(),
                    d.isVacxinated() ? "Đã tiêm" : "Chưa tiêm"
                });
            }
            if (p instanceof Hamster) {
                Hamster d = (Hamster) p;
                model.addRow(new Object[]{
                    d.getId(),
                    "Không có tên",
                    "Hamster",
                    d.getAge(),
                    d.getPrice(),
                    d.getColor(),
                    d.getDescrip(),
                    d.isInStock(),
                    d.isVacxinated() ? "Đã tiêm" : "Chưa tiêm"
                });
            }
        }

        Info infoFrame = new Info(model);
        infoFrame.setVisible(true);
        infoFrame.setLocationRelativeTo(null);

    }//GEN-LAST:event_displayActionPerformed

    public void resetForm() {
        id.setText("");
        name.setText("");
        choose.setSelectedIndex(0);
        age.setText("");
        price.setText("");
        color.setText("");
        descrip.setText("");
        count.setText("");
        vacxin.setText("");
    }

    public boolean checkValidateForm() {
        if (id.getText().isEmpty() || age.getText().isEmpty()
                || price.getText().isEmpty() || color.getText().isEmpty()
                || descrip.getText().isEmpty()
                || count.getText().isEmpty() || vacxin.getText().isEmpty()) {
            return false;
        } else {
            return true;
        }
    }
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        if (!checkValidateForm()) {
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập đầy đủ thông tin !!");
            return;
        }
        try {
            String idText = id.getText().trim();
            String nameText = name.getText().trim();
            String type = choose.getSelectedItem().toString();
            int ageVal = Integer.parseInt(age.getText().trim());
            double priceVal = Double.parseDouble(price.getText().trim());
            String colorText = color.getText().trim();
            String descripText = descrip.getText().trim();
            int countVal = Integer.parseInt(count.getText().trim());
            String vacxinVal = vacxin.getText().trim();
            String tmp = vacxinVal.equalsIgnoreCase("Đã Tiêm") ? "true" : "false";
            Boolean s = Boolean.parseBoolean(tmp);
            Pet p = null;
            if (type.equals("Dog")) {
                p = new Dog(nameText, descripText, countVal, s, idText, priceVal, ageVal, 0.0, colorText);
            } else if (type.equals("Cat")) {
                p = new Cat(nameText, descripText, countVal, s, idText, priceVal, ageVal, 0.0, colorText);
            } else if (type.equals("Hamster")) {
                p = new Hamster(descripText, s, countVal, idText, priceVal, ageVal, 0.0, colorText);
            }

            if (p != null) {
                petList.add(p);
                JOptionPane.showMessageDialog(this, "Đã thêm thú cưng vào danh sách.");
                resetForm();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ cho tuổi, giá, số lượng.", "Lỗi nhập liệu", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm thú cưng: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addActionPerformed

    private void readfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readfileActionPerformed
        // TODO add your handling code here:
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(System.getProperty("user.dir") + File.separator + "pet.dat"))) {
            List<Pet> loadPet = (List<Pet>) ois.readObject();
            for (Pet p : loadPet) {
                boolean exists = false;
                for (Pet existing : petList) {
                    if (existing.getId().equalsIgnoreCase(p.getId())) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    petList.add(p);
                }
            }

            JOptionPane.showMessageDialog(this, "Đọc file thành công ");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_readfileActionPerformed

    private void savefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savefileActionPerformed
        // TODO add your handling code here:
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(System.getProperty("user.dir") + File.separator + "pet.dat"))) {
            oos.writeObject(petList);
            JOptionPane.showMessageDialog(this, "Đã lưu dữ liệu thành công ");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_savefileActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        // TODO add your handling code here:
        String idpet = id.getText().trim();
        String namepet = name.getText().trim();
        if (idpet.isEmpty() && namepet.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập id hoặc tên để tìm kiếm !");
            return;
        }

        DefaultTableModel findModel = new DefaultTableModel(
                new String[]{"Mã Thú Cưng", "Tên Thú Cưng", "Loại", "Tuổi",
                    "Giá", "Màu Lông", "Mô Tả", "Số Lượng", "Vacxin"}, 0
        );
        List<Pet> foundList = new ArrayList<>();

        for (Pet p : petList) {
            boolean match = false;
            if (!idpet.isEmpty() && p.getId().equalsIgnoreCase(idpet)) {
                match = true;
            }
            if (p instanceof Dog d && !namepet.isEmpty()
                    && d.getName().equalsIgnoreCase(namepet)) {
                match = true;
            }
            if (p instanceof Cat c && !namepet.isEmpty()
                    && c.getName().equalsIgnoreCase(namepet)) {
                match = true;
            }

            if (match) {
                foundList.add(p);
                if (p instanceof Dog d) {
                    findModel.addRow(new Object[]{
                        d.getId(), d.getName(), "Dog", d.getAge(), d.getPrice(), d.getColor(),
                        d.getDescrip(), d.isInStock(), d.isVacxinated() ? "Đã tiêm" : "Chưa tiêm"
                    });
                } else if (p instanceof Cat c) {
                    findModel.addRow(new Object[]{
                        c.getId(), c.getName(), "Cat", c.getAge(), c.getPrice(), c.getColor(),
                        c.getDescrip(), c.isInStock(), c.isVacxinated() ? "Đã tiêm" : "Chưa tiêm"
                    });
                } else if (p instanceof Hamster h) {
                    findModel.addRow(new Object[]{
                        h.getId(), "", "Hamster", h.getAge(), h.getPrice(), h.getColor(),
                        h.getDescrip(), h.isInStock(), h.isVacxinated() ? "Đã tiêm" : "Chưa tiêm"
                    });
                }
            }
        }

        //
        if (foundList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy thú cưng nào.");
        } else {
            new FindInfo(findModel, petList, foundList).setVisible(true);
        }

    }//GEN-LAST:event_findActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FrPetShop().setVisible(true));
    }

    private DefaultTableModel model;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField age;
    private javax.swing.JComboBox<String> choose;
    private javax.swing.JTextField color;
    private javax.swing.JTextField count;
    private javax.swing.JTextField descrip;
    private javax.swing.JButton display;
    private javax.swing.JButton exit;
    private javax.swing.JButton find;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JButton readfile;
    private javax.swing.JButton savefile;
    private javax.swing.JTextField vacxin;
    // End of variables declaration//GEN-END:variables
}
